# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: steammessages_auth.steamclient.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder


# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()

import pysteamauth.pb.enums_pb2 as enums__pb2
import pysteamauth.pb.steammessages_base_pb2 as steammessages__base__pb2
from pysteamauth.pb.steammessages_unified_base import \
    steamclient_pb2 as steammessages__unified__base_dot_steamclient__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(
    b'\n$steammessages_auth.steamclient.proto\x1a\x18steammessages_base.proto\x1a,steammessages_unified_base.steamclient.proto\x1a\x0b\x65nums.proto\"}\n/CAuthentication_GetPasswordRSAPublicKey_Request\x12J\n\x0c\x61\x63\x63ount_name\x18\x01 \x01(\tB4\x82\xb5\x18\x30user-provided account name to get an RSA key for\"\xd5\x01\n0CAuthentication_GetPasswordRSAPublicKey_Response\x12\x31\n\rpublickey_mod\x18\x01 \x01(\tB\x1a\x82\xb5\x18\x16the public key modulus\x12\x32\n\rpublickey_exp\x18\x02 \x01(\tB\x1b\x82\xb5\x18\x17the public key exponent\x12:\n\ttimestamp\x18\x03 \x01(\x04\x42\'\x82\xb5\x18#the timestamp the key was generated\"\xad\x03\n\x1d\x43\x41uthentication_DeviceDetails\x12\\\n\x14\x64\x65vice_friendly_name\x18\x01 \x01(\tB>\x82\xb5\x18:User-supplied, or client-supplied, friendly name of device\x12\x80\x01\n\rplatform_type\x18\x02 \x01(\x0e\x32\x17.EAuthTokenPlatformType: k_EAuthTokenPlatformType_UnknownB.\x82\xb5\x18*EAuthTokenPlatformType, claimed, of device\x12;\n\x07os_type\x18\x03 \x01(\x05\x42*\x82\xb5\x18&EOSType, claimed, of authorized device\x12n\n\x12gaming_device_type\x18\x04 \x01(\rBR\x82\xb5\x18NEGamingDeviceType, claimed, of authorized device for steam client-type devices\"\xf8\x02\n-CAuthentication_BeginAuthSessionViaQR_Request\x12\x1c\n\x14\x64\x65vice_friendly_name\x18\x01 \x01(\t\x12P\n\rplatform_type\x18\x02 \x01(\x0e\x32\x17.EAuthTokenPlatformType: k_EAuthTokenPlatformType_Unknown\x12x\n\x0e\x64\x65vice_details\x18\x03 \x01(\x0b\x32\x1e.CAuthentication_DeviceDetailsB@\x82\xb5\x18<User-supplied details about the device attempting to sign in\x12]\n\nwebsite_id\x18\x04 \x01(\t:\x07UnknownB@\x82\xb5\x18<(EMachineAuthWebDomain) identifier of client requesting auth\"\xf2\x02\n#CAuthentication_AllowedConfirmation\x12\x8e\x01\n\x11\x63onfirmation_type\x18\x01 \x01(\x0e\x32\x16.EAuthSessionGuardType:\x1fk_EAuthSessionGuardType_UnknownB:\x82\xb5\x18\x36\x61uthentication can proceed with this confirmation type\x12\xb9\x01\n\x12\x61ssociated_message\x18\x02 \x01(\tB\x9c\x01\x82\xb5\x18\x97\x01message to be interpreted depending on the confirmation type. for email confirmation, this might be the redacted email address to which email was sent.\"\xf1\x04\n.CAuthentication_BeginAuthSessionViaQR_Response\x12`\n\tclient_id\x18\x01 \x01(\x04\x42M\x82\xb5\x18Iunique identifier of requestor, also used for routing, portion of QR code\x12T\n\rchallenge_url\x18\x02 \x01(\tB=\x82\xb5\x18\x39URL based on client ID, which will be rendered as QR code\x12p\n\nrequest_id\x18\x03 \x01(\x0c\x42\\\x82\xb5\x18Xunique request ID to be presented by requestor at poll time - must not be rendered in QR\x12]\n\x08interval\x18\x04 \x01(\x02\x42K\x82\xb5\x18Grefresh interval with which requestor should call PollAuthSessionStatus\x12\x88\x01\n\x15\x61llowed_confirmations\x18\x05 \x03(\x0b\x32$.CAuthentication_AllowedConfirmationBC\x82\xb5\x18?the confirmation types that will be able to confirm the request\x12+\n\x07version\x18\x06 \x01(\x05\x42\x1a\x82\xb5\x18\x16version of the QR data\"\xa8\x06\n6CAuthentication_BeginAuthSessionViaCredentials_Request\x12\x1c\n\x14\x64\x65vice_friendly_name\x18\x01 \x01(\t\x12\x14\n\x0c\x61\x63\x63ount_name\x18\x02 \x01(\t\x12\x43\n\x12\x65ncrypted_password\x18\x03 \x01(\tB\'\x82\xb5\x18#password, RSA encrypted client side\x12\x43\n\x14\x65ncryption_timestamp\x18\x04 \x01(\x04\x42%\x82\xb5\x18!timestamp to map to a key - STime\x12&\n\x0eremember_login\x18\x05 \x01(\x08\x42\x0e\x82\xb5\x18\ndeprecated\x12P\n\rplatform_type\x18\x06 \x01(\x0e\x32\x17.EAuthTokenPlatformType: k_EAuthTokenPlatformType_Unknown\x12\x8f\x01\n\x0bpersistence\x18\x07 \x01(\x0e\x32\x14.ESessionPersistence: k_ESessionPersistence_PersistentBB\x82\xb5\x18>whether we are requesting a persistent or an ephemeral session\x12]\n\nwebsite_id\x18\x08 \x01(\t:\x07UnknownB@\x82\xb5\x18<(EMachineAuthWebDomain) identifier of client requesting auth\x12x\n\x0e\x64\x65vice_details\x18\t \x01(\x0b\x32\x1e.CAuthentication_DeviceDetailsB@\x82\xb5\x18<User-supplied details about the device attempting to sign in\x12\x39\n\nguard_data\x18\n \x01(\tB%\x82\xb5\x18!steam guard data for client login\x12\x10\n\x08language\x18\x0b \x01(\r\"\xfa\x06\n7CAuthentication_BeginAuthSessionViaCredentials_Response\x12L\n\tclient_id\x18\x01 \x01(\x04\x42\x39\x82\xb5\x18\x35unique identifier of requestor, also used for routing\x12z\n\nrequest_id\x18\x02 \x01(\x0c\x42\x66\x82\xb5\x18\x62unique request ID to be presented by requestor at poll time - must not be transferred or displayed\x12]\n\x08interval\x18\x03 \x01(\x02\x42K\x82\xb5\x18Grefresh interval with which requestor should call PollAuthSessionStatus\x12\x88\x01\n\x15\x61llowed_confirmations\x18\x04 \x03(\x0b\x32$.CAuthentication_AllowedConfirmationBC\x82\xb5\x18?the confirmation types that will be able to confirm the request\x12n\n\x07steamid\x18\x05 \x01(\x04\x42]\x82\xb5\x18Ysteamid of the account logging in - will only be included if the credentials were correct\x12z\n\nweak_token\x18\x06 \x01(\tBf\x82\xb5\x18\x62partial-authentication token - limited lifetime and scope, included only if credentials were valid\x12G\n\x15\x61greement_session_url\x18\x07 \x01(\tB(\x82\xb5\x18$agreement the user needs to agree to\x12V\n\x16\x65xtended_error_message\x18\x08 \x01(\tB6\x82\xb5\x18\x32\x65rror string to display if supported by the client\"\xbd\x01\n-CAuthentication_PollAuthSessionStatus_Request\x12\x11\n\tclient_id\x18\x01 \x01(\x04\x12\x12\n\nrequest_id\x18\x02 \x01(\x0c\x12\x65\n\x0ftoken_to_revoke\x18\x03 \x01(\x06\x42L\x82\xb5\x18HIf this is set to a token owned by this user, that token will be retired\"\x8a\x06\n.CAuthentication_PollAuthSessionStatus_Response\x12I\n\rnew_client_id\x18\x01 \x01(\x04\x42\x32\x82\xb5\x18.if challenge is old, this is the new client id\x12u\n\x11new_challenge_url\x18\x02 \x01(\tBZ\x82\xb5\x18Vif challenge is old, this is the new challenge ID to re-render for mobile confirmation\x12\x61\n\rrefresh_token\x18\x03 \x01(\tBJ\x82\xb5\x18\x46if login has been confirmed, this is the requestor\'s new refresh token\x12g\n\x0c\x61\x63\x63\x65ss_token\x18\x04 \x01(\tBQ\x82\xb5\x18Mif login has been confirmed, this is a new token subordinate to refresh_token\x12\x85\x01\n\x16had_remote_interaction\x18\x05 \x01(\x08\x42\x65\x82\xb5\x18\x61whether or not the auth session appears to have had remote interaction from a potential confirmer\x12U\n\x0c\x61\x63\x63ount_name\x18\x06 \x01(\tB?\x82\xb5\x18;account name of authenticating account, for use by UI layer\x12k\n\x0enew_guard_data\x18\x07 \x01(\tBS\x82\xb5\x18Oif login has been confirmed, may contain remembered machine ID for future login\"u\n*CAuthentication_GetAuthSessionInfo_Request\x12G\n\tclient_id\x18\x01 \x01(\x04\x42\x34\x82\xb5\x18\x30\x63lient ID from scanned QR Code, used for routing\"\xbb\x07\n+CAuthentication_GetAuthSessionInfo_Response\x12\'\n\x02ip\x18\x01 \x01(\tB\x1b\x82\xb5\x18\x17IP address of requestor\x12,\n\x06geoloc\x18\x02 \x01(\tB\x1c\x82\xb5\x18\x18geoloc info of requestor\x12#\n\x04\x63ity\x18\x03 \x01(\tB\x15\x82\xb5\x18\x11\x63ity of requestor\x12%\n\x05state\x18\x04 \x01(\tB\x16\x82\xb5\x18\x12state of requestor\x12)\n\x07\x63ountry\x18\x05 \x01(\tB\x18\x82\xb5\x18\x14\x63ountry of requestor\x12p\n\rplatform_type\x18\x06 \x01(\x0e\x32\x17.EAuthTokenPlatformType: k_EAuthTokenPlatformType_UnknownB\x1e\x82\xb5\x18\x1aplatform type of requestor\x12:\n\x14\x64\x65vice_friendly_name\x18\x07 \x01(\tB\x1c\x82\xb5\x18\x18name of requestor device\x12\"\n\x07version\x18\x08 \x01(\x05\x42\x11\x82\xb5\x18\rversion field\x12\xa4\x01\n\rlogin_history\x18\t \x01(\x0e\x32\x1c.EAuthSessionSecurityHistory:%k_EAuthSessionSecurityHistory_InvalidBH\x82\xb5\x18\x44whether the ip has previuously been used on the account successfully\x12\x66\n\x1brequestor_location_mismatch\x18\n \x01(\x08\x42\x41\x82\xb5\x18=whether the requestor location matches this requests location\x12M\n\x10high_usage_login\x18\x0b \x01(\x08\x42\x33\x82\xb5\x18/whether this login has seen high usage recently\x12\x8d\x01\n\x15requested_persistence\x18\x0c \x01(\x0e\x32\x14.ESessionPersistence:\x1dk_ESessionPersistence_InvalidB9\x82\xb5\x18\x35session persistence requestor has indicated they want\"\x9c\x04\n?CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request\x12\"\n\x07version\x18\x01 \x01(\x05\x42\x11\x82\xb5\x18\rversion field\x12>\n\tclient_id\x18\x02 \x01(\x04\x42+\x82\xb5\x18\'pending client ID, from scanned QR Code\x12,\n\x07steamid\x18\x03 \x01(\x06\x42\x1b\x82\xb5\x18\x17user who wants to login\x12Z\n\tsignature\x18\x04 \x01(\x0c\x42G\x82\xb5\x18\x43HMAC digest over {version,client_id,steamid} via user\'s private key\x12Y\n\x07\x63onfirm\x18\x05 \x01(\x08:\x05\x66\x61lseBA\x82\xb5\x18=Whether to confirm the login (true) or deny the login (false)\x12\x8f\x01\n\x0bpersistence\x18\x06 \x01(\x0e\x32\x14.ESessionPersistence: k_ESessionPersistence_PersistentBB\x82\xb5\x18>whether we are requesting a persistent or an ephemeral session\"B\n@CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response\"\xbf\x02\n;CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request\x12\x42\n\tclient_id\x18\x01 \x01(\x04\x42/\x82\xb5\x18+pending client ID, from initialized session\x12,\n\x07steamid\x18\x02 \x01(\x06\x42\x1b\x82\xb5\x18\x17user who wants to login\x12#\n\x04\x63ode\x18\x03 \x01(\tB\x15\x82\xb5\x18\x11\x63onfirmation code\x12i\n\tcode_type\x18\x04 \x01(\x0e\x32\x16.EAuthSessionGuardType:\x1fk_EAuthSessionGuardType_UnknownB\x1d\x82\xb5\x18\x19type of confirmation code\"\x87\x01\n<CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response\x12G\n\x15\x61greement_session_url\x18\x07 \x01(\tB(\x82\xb5\x18$agreement the user needs to agree to\"\\\n2CAuthentication_AccessToken_GenerateForApp_Request\x12\x15\n\rrefresh_token\x18\x01 \x01(\t\x12\x0f\n\x07steamid\x18\x02 \x01(\x06\"K\n3CAuthentication_AccessToken_GenerateForApp_Response\x12\x14\n\x0c\x61\x63\x63\x65ss_token\x18\x01 \x01(\t\"0\n.CAuthentication_RefreshToken_Enumerate_Request\"\xab\r\n/CAuthentication_RefreshToken_Enumerate_Response\x12`\n\x0erefresh_tokens\x18\x01 \x03(\x0b\x32H.CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription\x12\x18\n\x10requesting_token\x18\x02 \x01(\x06\x1a\x93\x03\n\x0fTokenUsageEvent\x12[\n\x04time\x18\x01 \x01(\rBM\x82\xb5\x18IApproximate time of history event (may be deliberately fuzzed or omitted)\x12>\n\x02ip\x18\x02 \x01(\x0b\x32\x0e.CMsgIPAddressB\"\x82\xb5\x18\x1eIP at which event was observed\x12\x0e\n\x06locale\x18\x03 \x01(\t\x12J\n\x07\x63ountry\x18\x04 \x01(\tB9\x82\xb5\x18\x35Location (country code) of event, as inferred from IP\x12\x46\n\x05state\x18\x05 \x01(\tB7\x82\xb5\x18\x33Location (state code) of event, as inferred from IP\x12?\n\x04\x63ity\x18\x06 \x01(\tB1\x82\xb5\x18-Location (city) of event, as inferred from IP\x1a\xe5\x08\n\x17RefreshTokenDescription\x12\x38\n\x08token_id\x18\x01 \x01(\x06\x42&\x82\xb5\x18\"Persistent token/device identifier\x12K\n\x11token_description\x18\x02 \x01(\tB0\x82\xb5\x18,client-supplied friendly name for the device\x12\x14\n\x0ctime_updated\x18\x03 \x01(\r\x12\x81\x01\n\rplatform_type\x18\x04 \x01(\x0e\x32\x17.EAuthTokenPlatformType: k_EAuthTokenPlatformType_UnknownB/\x82\xb5\x18+gross platform type (mobile/client/browser)\x12\x94\x01\n\tlogged_in\x18\x05 \x01(\x08\x42\x80\x01\x82\xb5\x18|If true, this token is currently valid. False indicates it is a machine token - ok for steamguard if you know the credential\x12T\n\x0bos_platform\x18\x06 \x01(\rB?\x82\xb5\x18;EPlatformType - rough classification of device OS, if known\x12U\n\tauth_type\x18\x07 \x01(\rBB\x82\xb5\x18>EAuthTokenGuardType - device authorization mechanism, if known\x12\x82\x01\n\x12gaming_device_type\x18\x08 \x01(\rBf\x82\xb5\x18\x62\x45GamingDeviceType - classify console/PC/SteamDeck, if known; applies only for Steam Client devices\x12\x88\x01\n\nfirst_seen\x18\t \x01(\x0b\x32@.CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEventB2\x82\xb5\x18.Information about original authorization event\x12\x97\x01\n\tlast_seen\x18\n \x01(\x0b\x32@.CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEventBB\x82\xb5\x18>Information about most-recently seen, if known for this device\x12;\n\x07os_type\x18\x0b \x01(\x05\x42*\x82\xb5\x18&EOSType - specific device OS, if known\"3\n1CAuthentication_GetAuthSessionsForAccount_Request\"\x83\x01\n2CAuthentication_GetAuthSessionsForAccount_Response\x12M\n\nclient_ids\x18\x01 \x03(\x04\x42\x39\x82\xb5\x18\x35unique identifier of requestor, also used for routing\"\xdb\x01\n,CAuthentication_MigrateMobileSession_Request\x12\x34\n\x07steamid\x18\x01 \x01(\x06\x42#\x82\xb5\x18\x1fSteam ID of the user to migrate\x12&\n\x05token\x18\x02 \x01(\tB\x17\x82\xb5\x18\x13WG Token to migrate\x12M\n\tsignature\x18\x03 \x01(\tB:\x82\xb5\x18\x36Signature over the wg token using the user\'s 2FA token\"\\\n-CAuthentication_MigrateMobileSession_Response\x12\x15\n\rrefresh_token\x18\x01 \x01(\t\x12\x14\n\x0c\x61\x63\x63\x65ss_token\x18\x02 \x01(\t\"\xcf\x02\n+CAuthentication_RefreshToken_Revoke_Request\x12\x10\n\x08token_id\x18\x01 \x01(\x06\x12N\n\x07steamid\x18\x02 \x01(\x06\x42=\x82\xb5\x18\x39Token holder if an admin action on behalf of another user\x12\x84\x01\n\rrevoke_action\x18\x03 \x01(\x0e\x32\x17.EAuthTokenRevokeAction:\x1bk_EAuthTokenRevokePermanentB7\x82\xb5\x18\x33Select between logout and logout-and-forget-machine\x12\x37\n\tsignature\x18\x04 \x01(\x0c\x42$\x82\xb5\x18 required signature over token_id\".\n,CAuthentication_RefreshToken_Revoke_Response\"\xdb\x01\n:CAuthenticationSupport_QueryRefreshTokensByAccount_Request\x12?\n\x07steamid\x18\x01 \x01(\x06\x42.\x82\xb5\x18*SteamID of the account to query (required)\x12\\\n\x16include_revoked_tokens\x18\x02 \x01(\x08\x42<\x82\xb5\x18\x38Includes tokens that are revoked or expired in the query\"\x88\n\n\x1f\x43SupportRefreshTokenDescription\x12\x10\n\x08token_id\x18\x01 \x01(\x06\x12\x19\n\x11token_description\x18\x02 \x01(\t\x12\x14\n\x0ctime_updated\x18\x03 \x01(\r\x12P\n\rplatform_type\x18\x04 \x01(\x0e\x32\x17.EAuthTokenPlatformType: k_EAuthTokenPlatformType_Unknown\x12@\n\x0btoken_state\x18\x05 \x01(\x0e\x32\x10.EAuthTokenState:\x19k_EAuthTokenState_Invalid\x12\x15\n\rowner_steamid\x18\x06 \x01(\x06\x12T\n\x0bos_platform\x18\x07 \x01(\rB?\x82\xb5\x18;EPlatformType - rough classification of device OS, if known\x12;\n\x07os_type\x18\x08 \x01(\x05\x42*\x82\xb5\x18&EOSType - specific device OS, if known\x12U\n\tauth_type\x18\t \x01(\rBB\x82\xb5\x18>EAuthTokenGuardType - device authorization mechanism, if known\x12\x82\x01\n\x12gaming_device_type\x18\n \x01(\rBf\x82\xb5\x18\x62\x45GamingDeviceType - classify console/PC/SteamDeck, if known; applies only for Steam Client devices\x12x\n\nfirst_seen\x18\x0b \x01(\x0b\x32\x30.CSupportRefreshTokenDescription.TokenUsageEventB2\x82\xb5\x18.Information about original authorization event\x12\x87\x01\n\tlast_seen\x18\x0c \x01(\x0b\x32\x30.CSupportRefreshTokenDescription.TokenUsageEventBB\x82\xb5\x18>Information about most-recently seen, if known for this device\x1a\x83\x03\n\x0fTokenUsageEvent\x12[\n\x04time\x18\x01 \x01(\rBM\x82\xb5\x18IApproximate time of history event (may be deliberately fuzzed or omitted)\x12>\n\x02ip\x18\x02 \x01(\x0b\x32\x0e.CMsgIPAddressB\"\x82\xb5\x18\x1eIP at which event was observed\x12J\n\x07\x63ountry\x18\x03 \x01(\tB9\x82\xb5\x18\x35Location (country code) of event, as inferred from IP\x12\x46\n\x05state\x18\x04 \x01(\tB7\x82\xb5\x18\x33Location (state code) of event, as inferred from IP\x12?\n\x04\x63ity\x18\x05 \x01(\tB1\x82\xb5\x18-Location (city) of event, as inferred from IP\"w\n;CAuthenticationSupport_QueryRefreshTokensByAccount_Response\x12\x38\n\x0erefresh_tokens\x18\x01 \x03(\x0b\x32 .CSupportRefreshTokenDescription\"y\n4CAuthenticationSupport_QueryRefreshTokenByID_Request\x12\x41\n\x08token_id\x18\x01 \x01(\x06\x42/\x82\xb5\x18+Token ID of the token to look up (required)\"q\n5CAuthenticationSupport_QueryRefreshTokenByID_Response\x12\x38\n\x0erefresh_tokens\x18\x01 \x03(\x0b\x32 .CSupportRefreshTokenDescription\"\xb3\x01\n*CAuthenticationSupport_RevokeToken_Request\x12@\n\x08token_id\x18\x01 \x01(\x06\x42.\x82\xb5\x18*Token ID of the token to revoke (required)\x12\x43\n\x07steamid\x18\x02 \x01(\x06\x42\x32\x82\xb5\x18.Steam ID of the owner of that token (required)\"-\n+CAuthenticationSupport_RevokeToken_Response\"{\n.CAuthenticationSupport_GetTokenHistory_Request\x12I\n\x08token_id\x18\x01 \x01(\x06\x42\x37\x82\xb5\x18\x33Token ID of the token to get history for (required)\"d\n\x19\x43SupportRefreshTokenAudit\x12\x0e\n\x06\x61\x63tion\x18\x01 \x01(\x05\x12\x0c\n\x04time\x18\x02 \x01(\r\x12\x1a\n\x02ip\x18\x03 \x01(\x0b\x32\x0e.CMsgIPAddress\x12\r\n\x05\x61\x63tor\x18\x04 \x01(\x06\"^\n/CAuthenticationSupport_GetTokenHistory_Response\x12+\n\x07history\x18\x01 \x03(\x0b\x32\x1a.CSupportRefreshTokenAudit\"C\n CCloudGaming_CreateNonce_Request\x12\x10\n\x08platform\x18\x01 \x01(\t\x12\r\n\x05\x61ppid\x18\x02 \x01(\r\"B\n!CCloudGaming_CreateNonce_Response\x12\r\n\x05nonce\x18\x01 \x01(\t\x12\x0e\n\x06\x65xpiry\x18\x02 \x01(\r\"M\n%CCloudGaming_GetTimeRemaining_Request\x12\x10\n\x08platform\x18\x01 \x01(\t\x12\x12\n\nappid_list\x18\x02 \x03(\r\"F\n\x1a\x43\x43loudGaming_TimeRemaining\x12\r\n\x05\x61ppid\x18\x01 \x01(\r\x12\x19\n\x11minutes_remaining\x18\x02 \x01(\r\"V\n&CCloudGaming_GetTimeRemaining_Response\x12,\n\x07\x65ntries\x18\x02 \x03(\x0b\x32\x1b.CCloudGaming_TimeRemaining*\xb9\x01\n\x16\x45\x41uthTokenPlatformType\x12$\n k_EAuthTokenPlatformType_Unknown\x10\x00\x12(\n$k_EAuthTokenPlatformType_SteamClient\x10\x01\x12\'\n#k_EAuthTokenPlatformType_WebBrowser\x10\x02\x12&\n\"k_EAuthTokenPlatformType_MobileApp\x10\x03*\xb6\x02\n\x15\x45\x41uthSessionGuardType\x12#\n\x1fk_EAuthSessionGuardType_Unknown\x10\x00\x12 \n\x1ck_EAuthSessionGuardType_None\x10\x01\x12%\n!k_EAuthSessionGuardType_EmailCode\x10\x02\x12&\n\"k_EAuthSessionGuardType_DeviceCode\x10\x03\x12.\n*k_EAuthSessionGuardType_DeviceConfirmation\x10\x04\x12-\n)k_EAuthSessionGuardType_EmailConfirmation\x10\x05\x12(\n$k_EAuthSessionGuardType_MachineToken\x10\x06*\xac\x01\n\x1b\x45\x41uthSessionSecurityHistory\x12)\n%k_EAuthSessionSecurityHistory_Invalid\x10\x00\x12\x30\n,k_EAuthSessionSecurityHistory_UsedPreviously\x10\x01\x12\x30\n,k_EAuthSessionSecurityHistory_NoPriorHistory\x10\x02*\xb5\x01\n\x16\x45\x41uthTokenRevokeAction\x12\x1c\n\x18k_EAuthTokenRevokeLogout\x10\x00\x12\x1f\n\x1bk_EAuthTokenRevokePermanent\x10\x01\x12\x1e\n\x1ak_EAuthTokenRevokeReplaced\x10\x02\x12\x1d\n\x19k_EAuthTokenRevokeSupport\x10\x03\x12\x1d\n\x19k_EAuthTokenRevokeConsume\x10\x04*\x88\x02\n\x0f\x45\x41uthTokenState\x12\x1d\n\x19k_EAuthTokenState_Invalid\x10\x00\x12\x19\n\x15k_EAuthTokenState_New\x10\x01\x12\x1f\n\x1bk_EAuthTokenState_Confirmed\x10\x02\x12\x1c\n\x18k_EAuthTokenState_Issued\x10\x03\x12\x1c\n\x18k_EAuthTokenState_Denied\x10\x04\x12\x1f\n\x1bk_EAuthTokenState_LoggedOut\x10\x05\x12\x1e\n\x1ak_EAuthTokenState_Consumed\x10\x06\x12\x1d\n\x19k_EAuthTokenState_Revoked\x10\x63\x32\xab\x13\n\x0e\x41uthentication\x12\xcf\x01\n\x17GetPasswordRSAPublicKey\x12\x30.CAuthentication_GetPasswordRSAPublicKey_Request\x1a\x31.CAuthentication_GetPasswordRSAPublicKey_Response\"O\x82\xb5\x18KFetches RSA public key to use to encrypt passwords for a given account name\x12\x9a\x01\n\x15\x42\x65ginAuthSessionViaQR\x12..CAuthentication_BeginAuthSessionViaQR_Request\x1a/.CAuthentication_BeginAuthSessionViaQR_Response\" \x82\xb5\x18\x1cstart authentication process\x12\xb5\x01\n\x1e\x42\x65ginAuthSessionViaCredentials\x12\x37.CAuthentication_BeginAuthSessionViaCredentials_Request\x1a\x38.CAuthentication_BeginAuthSessionViaCredentials_Response\" \x82\xb5\x18\x1cstart authentication process\x12\xa0\x01\n\x15PollAuthSessionStatus\x12..CAuthentication_PollAuthSessionStatus_Request\x1a/.CAuthentication_PollAuthSessionStatus_Response\"&\x82\xb5\x18\"poll during authentication process\x12\xce\x01\n\x12GetAuthSessionInfo\x12+.CAuthentication_GetAuthSessionInfo_Request\x1a,.CAuthentication_GetAuthSessionInfo_Response\"]\x82\xb5\x18Yget metadata of specific auth session, this will also implicitly bind the calling account\x12\xe4\x01\n\'UpdateAuthSessionWithMobileConfirmation\x12@.CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request\x1a\x41.CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response\"4\x82\xb5\x18\x30\x61pprove an authentication session via mobile 2fa\x12\xde\x01\n#UpdateAuthSessionWithSteamGuardCode\x12<.CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request\x1a=.CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response\":\x82\xb5\x18\x36\x61pprove an authentication session via steam guard code\x12\xfb\x01\n\x19GenerateAccessTokenForApp\x12\x33.CAuthentication_AccessToken_GenerateForApp_Request\x1a\x34.CAuthentication_AccessToken_GenerateForApp_Response\"s\x82\xb5\x18oGiven a refresh token for a client app audience (e.g. desktop client / mobile client), generate an access token\x12\xba\x01\n\x0f\x45numerateTokens\x12/.CAuthentication_RefreshToken_Enumerate_Request\x1a\x30.CAuthentication_RefreshToken_Enumerate_Response\"D\x82\xb5\x18@Enumerate durable (refresh) tokens for the given subject account\x12\xd6\x01\n\x19GetAuthSessionsForAccount\x12\x32.CAuthentication_GetAuthSessionsForAccount_Request\x1a\x33.CAuthentication_GetAuthSessionsForAccount_Response\"P\x82\xb5\x18LGets all active auth sessions for an account for reference by the mobile app\x12\xe4\x01\n\x14MigrateMobileSession\x12-.CAuthentication_MigrateMobileSession_Request\x1a..CAuthentication_MigrateMobileSession_Response\"m\x82\xb5\x18iMigrates a WG token to an access and refresh token using a signature generated with the user\'s 2FA secret\x12\x9e\x01\n\x12RevokeRefreshToken\x12,.CAuthentication_RefreshToken_Revoke_Request\x1a-.CAuthentication_RefreshToken_Revoke_Response\"+\x82\xb5\x18\'Mark the given refresh token as revoked\x1a\x1a\x82\xb5\x18\x16\x41uthentication Service2\xb0\x06\n\x15\x41uthenticationSupport\x12\xe5\x01\n\x1bQueryRefreshTokensByAccount\x12;.CAuthenticationSupport_QueryRefreshTokensByAccount_Request\x1a<.CAuthenticationSupport_QueryRefreshTokensByAccount_Response\"K\x82\xb5\x18GAsks the server for a list of refresh tokens associated with an account\x12\xd3\x01\n\x15QueryRefreshTokenByID\x12\x35.CAuthenticationSupport_QueryRefreshTokenByID_Request\x1a\x36.CAuthenticationSupport_QueryRefreshTokenByID_Response\"K\x82\xb5\x18GAsks the server for a list of refresh tokens associated with an account\x12\x89\x01\n\x0bRevokeToken\x12+.CAuthenticationSupport_RevokeToken_Request\x1a,.CAuthenticationSupport_RevokeToken_Response\"\x1f\x82\xb5\x18\x1bRevokes a user\'s auth token\x12\xa8\x01\n\x0fGetTokenHistory\x12/.CAuthenticationSupport_GetTokenHistory_Request\x1a\x30.CAuthenticationSupport_GetTokenHistory_Response\"2\x82\xb5\x18.Gets the audit history for a user\'s auth token\x1a\"\x82\xb5\x18\x1e\x41uthentication Support Service2\xf2\x02\n\x0b\x43loudGaming\x12\x8b\x01\n\x0b\x43reateNonce\x12!.CCloudGaming_CreateNonce_Request\x1a\".CCloudGaming_CreateNonce_Response\"5\x82\xb5\x18\x31\x43reate a nonce for a cloud gaming service session\x12\xa5\x01\n\x10GetTimeRemaining\x12&.CCloudGaming_GetTimeRemaining_Request\x1a\'.CCloudGaming_GetTimeRemaining_Response\"@\x82\xb5\x18<Get the amount of streaming time remaining for a set of apps\x1a-\x82\xb5\x18)Methods for Steam cloud gaming operationsB\x03\x80\x01\x01')

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'steammessages_auth.steamclient_pb2', globals())
if _descriptor._USE_C_DESCRIPTORS == False:
    DESCRIPTOR._options = None
    DESCRIPTOR._serialized_options = b'\200\001\001'
    _CAUTHENTICATION_GETPASSWORDRSAPUBLICKEY_REQUEST.fields_by_name['account_name']._options = None
    _CAUTHENTICATION_GETPASSWORDRSAPUBLICKEY_REQUEST.fields_by_name[
        'account_name']._serialized_options = b'\202\265\0300user-provided account name to get an RSA key for'
    _CAUTHENTICATION_GETPASSWORDRSAPUBLICKEY_RESPONSE.fields_by_name['publickey_mod']._options = None
    _CAUTHENTICATION_GETPASSWORDRSAPUBLICKEY_RESPONSE.fields_by_name[
        'publickey_mod']._serialized_options = b'\202\265\030\026the public key modulus'
    _CAUTHENTICATION_GETPASSWORDRSAPUBLICKEY_RESPONSE.fields_by_name['publickey_exp']._options = None
    _CAUTHENTICATION_GETPASSWORDRSAPUBLICKEY_RESPONSE.fields_by_name[
        'publickey_exp']._serialized_options = b'\202\265\030\027the public key exponent'
    _CAUTHENTICATION_GETPASSWORDRSAPUBLICKEY_RESPONSE.fields_by_name['timestamp']._options = None
    _CAUTHENTICATION_GETPASSWORDRSAPUBLICKEY_RESPONSE.fields_by_name[
        'timestamp']._serialized_options = b'\202\265\030#the timestamp the key was generated'
    _CAUTHENTICATION_DEVICEDETAILS.fields_by_name['device_friendly_name']._options = None
    _CAUTHENTICATION_DEVICEDETAILS.fields_by_name[
        'device_friendly_name']._serialized_options = b'\202\265\030:User-supplied, or client-supplied, friendly name of device'
    _CAUTHENTICATION_DEVICEDETAILS.fields_by_name['platform_type']._options = None
    _CAUTHENTICATION_DEVICEDETAILS.fields_by_name[
        'platform_type']._serialized_options = b'\202\265\030*EAuthTokenPlatformType, claimed, of device'
    _CAUTHENTICATION_DEVICEDETAILS.fields_by_name['os_type']._options = None
    _CAUTHENTICATION_DEVICEDETAILS.fields_by_name[
        'os_type']._serialized_options = b'\202\265\030&EOSType, claimed, of authorized device'
    _CAUTHENTICATION_DEVICEDETAILS.fields_by_name['gaming_device_type']._options = None
    _CAUTHENTICATION_DEVICEDETAILS.fields_by_name[
        'gaming_device_type']._serialized_options = b'\202\265\030NEGamingDeviceType, claimed, of authorized device for steam client-type devices'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_REQUEST.fields_by_name['device_details']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_REQUEST.fields_by_name[
        'device_details']._serialized_options = b'\202\265\030<User-supplied details about the device attempting to sign in'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_REQUEST.fields_by_name['website_id']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_REQUEST.fields_by_name[
        'website_id']._serialized_options = b'\202\265\030<(EMachineAuthWebDomain) identifier of client requesting auth'
    _CAUTHENTICATION_ALLOWEDCONFIRMATION.fields_by_name['confirmation_type']._options = None
    _CAUTHENTICATION_ALLOWEDCONFIRMATION.fields_by_name[
        'confirmation_type']._serialized_options = b'\202\265\0306authentication can proceed with this confirmation type'
    _CAUTHENTICATION_ALLOWEDCONFIRMATION.fields_by_name['associated_message']._options = None
    _CAUTHENTICATION_ALLOWEDCONFIRMATION.fields_by_name[
        'associated_message']._serialized_options = b'\202\265\030\227\001message to be interpreted depending on the confirmation type. for email confirmation, this might be the redacted email address to which email was sent.'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_RESPONSE.fields_by_name['client_id']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_RESPONSE.fields_by_name[
        'client_id']._serialized_options = b'\202\265\030Iunique identifier of requestor, also used for routing, portion of QR code'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_RESPONSE.fields_by_name['challenge_url']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_RESPONSE.fields_by_name[
        'challenge_url']._serialized_options = b'\202\265\0309URL based on client ID, which will be rendered as QR code'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_RESPONSE.fields_by_name['request_id']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_RESPONSE.fields_by_name[
        'request_id']._serialized_options = b'\202\265\030Xunique request ID to be presented by requestor at poll time - must not be rendered in QR'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_RESPONSE.fields_by_name['interval']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_RESPONSE.fields_by_name[
        'interval']._serialized_options = b'\202\265\030Grefresh interval with which requestor should call PollAuthSessionStatus'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_RESPONSE.fields_by_name['allowed_confirmations']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_RESPONSE.fields_by_name[
        'allowed_confirmations']._serialized_options = b'\202\265\030?the confirmation types that will be able to confirm the request'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_RESPONSE.fields_by_name['version']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_RESPONSE.fields_by_name[
        'version']._serialized_options = b'\202\265\030\026version of the QR data'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_REQUEST.fields_by_name['encrypted_password']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_REQUEST.fields_by_name[
        'encrypted_password']._serialized_options = b'\202\265\030#password, RSA encrypted client side'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_REQUEST.fields_by_name['encryption_timestamp']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_REQUEST.fields_by_name[
        'encryption_timestamp']._serialized_options = b'\202\265\030!timestamp to map to a key - STime'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_REQUEST.fields_by_name['remember_login']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_REQUEST.fields_by_name[
        'remember_login']._serialized_options = b'\202\265\030\ndeprecated'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_REQUEST.fields_by_name['persistence']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_REQUEST.fields_by_name[
        'persistence']._serialized_options = b'\202\265\030>whether we are requesting a persistent or an ephemeral session'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_REQUEST.fields_by_name['website_id']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_REQUEST.fields_by_name[
        'website_id']._serialized_options = b'\202\265\030<(EMachineAuthWebDomain) identifier of client requesting auth'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_REQUEST.fields_by_name['device_details']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_REQUEST.fields_by_name[
        'device_details']._serialized_options = b'\202\265\030<User-supplied details about the device attempting to sign in'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_REQUEST.fields_by_name['guard_data']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_REQUEST.fields_by_name[
        'guard_data']._serialized_options = b'\202\265\030!steam guard data for client login'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_RESPONSE.fields_by_name['client_id']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_RESPONSE.fields_by_name[
        'client_id']._serialized_options = b'\202\265\0305unique identifier of requestor, also used for routing'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_RESPONSE.fields_by_name['request_id']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_RESPONSE.fields_by_name[
        'request_id']._serialized_options = b'\202\265\030bunique request ID to be presented by requestor at poll time - must not be transferred or displayed'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_RESPONSE.fields_by_name['interval']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_RESPONSE.fields_by_name[
        'interval']._serialized_options = b'\202\265\030Grefresh interval with which requestor should call PollAuthSessionStatus'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_RESPONSE.fields_by_name['allowed_confirmations']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_RESPONSE.fields_by_name[
        'allowed_confirmations']._serialized_options = b'\202\265\030?the confirmation types that will be able to confirm the request'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_RESPONSE.fields_by_name['steamid']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_RESPONSE.fields_by_name[
        'steamid']._serialized_options = b'\202\265\030Ysteamid of the account logging in - will only be included if the credentials were correct'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_RESPONSE.fields_by_name['weak_token']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_RESPONSE.fields_by_name[
        'weak_token']._serialized_options = b'\202\265\030bpartial-authentication token - limited lifetime and scope, included only if credentials were valid'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_RESPONSE.fields_by_name['agreement_session_url']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_RESPONSE.fields_by_name[
        'agreement_session_url']._serialized_options = b'\202\265\030$agreement the user needs to agree to'
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_RESPONSE.fields_by_name['extended_error_message']._options = None
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_RESPONSE.fields_by_name[
        'extended_error_message']._serialized_options = b'\202\265\0302error string to display if supported by the client'
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_REQUEST.fields_by_name['token_to_revoke']._options = None
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_REQUEST.fields_by_name[
        'token_to_revoke']._serialized_options = b'\202\265\030HIf this is set to a token owned by this user, that token will be retired'
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_RESPONSE.fields_by_name['new_client_id']._options = None
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_RESPONSE.fields_by_name[
        'new_client_id']._serialized_options = b'\202\265\030.if challenge is old, this is the new client id'
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_RESPONSE.fields_by_name['new_challenge_url']._options = None
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_RESPONSE.fields_by_name[
        'new_challenge_url']._serialized_options = b'\202\265\030Vif challenge is old, this is the new challenge ID to re-render for mobile confirmation'
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_RESPONSE.fields_by_name['refresh_token']._options = None
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_RESPONSE.fields_by_name[
        'refresh_token']._serialized_options = b'\202\265\030Fif login has been confirmed, this is the requestor\'s new refresh token'
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_RESPONSE.fields_by_name['access_token']._options = None
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_RESPONSE.fields_by_name[
        'access_token']._serialized_options = b'\202\265\030Mif login has been confirmed, this is a new token subordinate to refresh_token'
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_RESPONSE.fields_by_name['had_remote_interaction']._options = None
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_RESPONSE.fields_by_name[
        'had_remote_interaction']._serialized_options = b'\202\265\030awhether or not the auth session appears to have had remote interaction from a potential confirmer'
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_RESPONSE.fields_by_name['account_name']._options = None
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_RESPONSE.fields_by_name[
        'account_name']._serialized_options = b'\202\265\030;account name of authenticating account, for use by UI layer'
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_RESPONSE.fields_by_name['new_guard_data']._options = None
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_RESPONSE.fields_by_name[
        'new_guard_data']._serialized_options = b'\202\265\030Oif login has been confirmed, may contain remembered machine ID for future login'
    _CAUTHENTICATION_GETAUTHSESSIONINFO_REQUEST.fields_by_name['client_id']._options = None
    _CAUTHENTICATION_GETAUTHSESSIONINFO_REQUEST.fields_by_name[
        'client_id']._serialized_options = b'\202\265\0300client ID from scanned QR Code, used for routing'
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name['ip']._options = None
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name[
        'ip']._serialized_options = b'\202\265\030\027IP address of requestor'
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name['geoloc']._options = None
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name[
        'geoloc']._serialized_options = b'\202\265\030\030geoloc info of requestor'
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name['city']._options = None
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name[
        'city']._serialized_options = b'\202\265\030\021city of requestor'
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name['state']._options = None
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name[
        'state']._serialized_options = b'\202\265\030\022state of requestor'
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name['country']._options = None
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name[
        'country']._serialized_options = b'\202\265\030\024country of requestor'
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name['platform_type']._options = None
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name[
        'platform_type']._serialized_options = b'\202\265\030\032platform type of requestor'
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name['device_friendly_name']._options = None
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name[
        'device_friendly_name']._serialized_options = b'\202\265\030\030name of requestor device'
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name['version']._options = None
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name[
        'version']._serialized_options = b'\202\265\030\rversion field'
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name['login_history']._options = None
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name[
        'login_history']._serialized_options = b'\202\265\030Dwhether the ip has previuously been used on the account successfully'
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name['requestor_location_mismatch']._options = None
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name[
        'requestor_location_mismatch']._serialized_options = b'\202\265\030=whether the requestor location matches this requests location'
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name['high_usage_login']._options = None
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name[
        'high_usage_login']._serialized_options = b'\202\265\030/whether this login has seen high usage recently'
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name['requested_persistence']._options = None
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE.fields_by_name[
        'requested_persistence']._serialized_options = b'\202\265\0305session persistence requestor has indicated they want'
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHMOBILECONFIRMATION_REQUEST.fields_by_name['version']._options = None
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHMOBILECONFIRMATION_REQUEST.fields_by_name[
        'version']._serialized_options = b'\202\265\030\rversion field'
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHMOBILECONFIRMATION_REQUEST.fields_by_name['client_id']._options = None
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHMOBILECONFIRMATION_REQUEST.fields_by_name[
        'client_id']._serialized_options = b'\202\265\030\'pending client ID, from scanned QR Code'
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHMOBILECONFIRMATION_REQUEST.fields_by_name['steamid']._options = None
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHMOBILECONFIRMATION_REQUEST.fields_by_name[
        'steamid']._serialized_options = b'\202\265\030\027user who wants to login'
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHMOBILECONFIRMATION_REQUEST.fields_by_name['signature']._options = None
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHMOBILECONFIRMATION_REQUEST.fields_by_name[
        'signature']._serialized_options = b'\202\265\030CHMAC digest over {version,client_id,steamid} via user\'s private key'
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHMOBILECONFIRMATION_REQUEST.fields_by_name['confirm']._options = None
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHMOBILECONFIRMATION_REQUEST.fields_by_name[
        'confirm']._serialized_options = b'\202\265\030=Whether to confirm the login (true) or deny the login (false)'
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHMOBILECONFIRMATION_REQUEST.fields_by_name['persistence']._options = None
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHMOBILECONFIRMATION_REQUEST.fields_by_name[
        'persistence']._serialized_options = b'\202\265\030>whether we are requesting a persistent or an ephemeral session'
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHSTEAMGUARDCODE_REQUEST.fields_by_name['client_id']._options = None
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHSTEAMGUARDCODE_REQUEST.fields_by_name[
        'client_id']._serialized_options = b'\202\265\030+pending client ID, from initialized session'
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHSTEAMGUARDCODE_REQUEST.fields_by_name['steamid']._options = None
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHSTEAMGUARDCODE_REQUEST.fields_by_name[
        'steamid']._serialized_options = b'\202\265\030\027user who wants to login'
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHSTEAMGUARDCODE_REQUEST.fields_by_name['code']._options = None
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHSTEAMGUARDCODE_REQUEST.fields_by_name[
        'code']._serialized_options = b'\202\265\030\021confirmation code'
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHSTEAMGUARDCODE_REQUEST.fields_by_name['code_type']._options = None
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHSTEAMGUARDCODE_REQUEST.fields_by_name[
        'code_type']._serialized_options = b'\202\265\030\031type of confirmation code'
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHSTEAMGUARDCODE_RESPONSE.fields_by_name[
        'agreement_session_url']._options = None
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHSTEAMGUARDCODE_RESPONSE.fields_by_name[
        'agreement_session_url']._serialized_options = b'\202\265\030$agreement the user needs to agree to'
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_TOKENUSAGEEVENT.fields_by_name['time']._options = None
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_TOKENUSAGEEVENT.fields_by_name[
        'time']._serialized_options = b'\202\265\030IApproximate time of history event (may be deliberately fuzzed or omitted)'
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_TOKENUSAGEEVENT.fields_by_name['ip']._options = None
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_TOKENUSAGEEVENT.fields_by_name[
        'ip']._serialized_options = b'\202\265\030\036IP at which event was observed'
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_TOKENUSAGEEVENT.fields_by_name['country']._options = None
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_TOKENUSAGEEVENT.fields_by_name[
        'country']._serialized_options = b'\202\265\0305Location (country code) of event, as inferred from IP'
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_TOKENUSAGEEVENT.fields_by_name['state']._options = None
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_TOKENUSAGEEVENT.fields_by_name[
        'state']._serialized_options = b'\202\265\0303Location (state code) of event, as inferred from IP'
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_TOKENUSAGEEVENT.fields_by_name['city']._options = None
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_TOKENUSAGEEVENT.fields_by_name[
        'city']._serialized_options = b'\202\265\030-Location (city) of event, as inferred from IP'
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name['token_id']._options = None
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name[
        'token_id']._serialized_options = b'\202\265\030\"Persistent token/device identifier'
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name[
        'token_description']._options = None
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name[
        'token_description']._serialized_options = b'\202\265\030,client-supplied friendly name for the device'
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name[
        'platform_type']._options = None
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name[
        'platform_type']._serialized_options = b'\202\265\030+gross platform type (mobile/client/browser)'
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name['logged_in']._options = None
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name[
        'logged_in']._serialized_options = b'\202\265\030|If true, this token is currently valid. False indicates it is a machine token - ok for steamguard if you know the credential'
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name[
        'os_platform']._options = None
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name[
        'os_platform']._serialized_options = b'\202\265\030;EPlatformType - rough classification of device OS, if known'
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name['auth_type']._options = None
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name[
        'auth_type']._serialized_options = b'\202\265\030>EAuthTokenGuardType - device authorization mechanism, if known'
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name[
        'gaming_device_type']._options = None
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name[
        'gaming_device_type']._serialized_options = b'\202\265\030bEGamingDeviceType - classify console/PC/SteamDeck, if known; applies only for Steam Client devices'
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name[
        'first_seen']._options = None
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name[
        'first_seen']._serialized_options = b'\202\265\030.Information about original authorization event'
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name['last_seen']._options = None
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name[
        'last_seen']._serialized_options = b'\202\265\030>Information about most-recently seen, if known for this device'
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name['os_type']._options = None
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION.fields_by_name[
        'os_type']._serialized_options = b'\202\265\030&EOSType - specific device OS, if known'
    _CAUTHENTICATION_GETAUTHSESSIONSFORACCOUNT_RESPONSE.fields_by_name['client_ids']._options = None
    _CAUTHENTICATION_GETAUTHSESSIONSFORACCOUNT_RESPONSE.fields_by_name[
        'client_ids']._serialized_options = b'\202\265\0305unique identifier of requestor, also used for routing'
    _CAUTHENTICATION_MIGRATEMOBILESESSION_REQUEST.fields_by_name['steamid']._options = None
    _CAUTHENTICATION_MIGRATEMOBILESESSION_REQUEST.fields_by_name[
        'steamid']._serialized_options = b'\202\265\030\037Steam ID of the user to migrate'
    _CAUTHENTICATION_MIGRATEMOBILESESSION_REQUEST.fields_by_name['token']._options = None
    _CAUTHENTICATION_MIGRATEMOBILESESSION_REQUEST.fields_by_name[
        'token']._serialized_options = b'\202\265\030\023WG Token to migrate'
    _CAUTHENTICATION_MIGRATEMOBILESESSION_REQUEST.fields_by_name['signature']._options = None
    _CAUTHENTICATION_MIGRATEMOBILESESSION_REQUEST.fields_by_name[
        'signature']._serialized_options = b'\202\265\0306Signature over the wg token using the user\'s 2FA token'
    _CAUTHENTICATION_REFRESHTOKEN_REVOKE_REQUEST.fields_by_name['steamid']._options = None
    _CAUTHENTICATION_REFRESHTOKEN_REVOKE_REQUEST.fields_by_name[
        'steamid']._serialized_options = b'\202\265\0309Token holder if an admin action on behalf of another user'
    _CAUTHENTICATION_REFRESHTOKEN_REVOKE_REQUEST.fields_by_name['revoke_action']._options = None
    _CAUTHENTICATION_REFRESHTOKEN_REVOKE_REQUEST.fields_by_name[
        'revoke_action']._serialized_options = b'\202\265\0303Select between logout and logout-and-forget-machine'
    _CAUTHENTICATION_REFRESHTOKEN_REVOKE_REQUEST.fields_by_name['signature']._options = None
    _CAUTHENTICATION_REFRESHTOKEN_REVOKE_REQUEST.fields_by_name[
        'signature']._serialized_options = b'\202\265\030 required signature over token_id'
    _CAUTHENTICATIONSUPPORT_QUERYREFRESHTOKENSBYACCOUNT_REQUEST.fields_by_name['steamid']._options = None
    _CAUTHENTICATIONSUPPORT_QUERYREFRESHTOKENSBYACCOUNT_REQUEST.fields_by_name[
        'steamid']._serialized_options = b'\202\265\030*SteamID of the account to query (required)'
    _CAUTHENTICATIONSUPPORT_QUERYREFRESHTOKENSBYACCOUNT_REQUEST.fields_by_name['include_revoked_tokens']._options = None
    _CAUTHENTICATIONSUPPORT_QUERYREFRESHTOKENSBYACCOUNT_REQUEST.fields_by_name[
        'include_revoked_tokens']._serialized_options = b'\202\265\0308Includes tokens that are revoked or expired in the query'
    _CSUPPORTREFRESHTOKENDESCRIPTION_TOKENUSAGEEVENT.fields_by_name['time']._options = None
    _CSUPPORTREFRESHTOKENDESCRIPTION_TOKENUSAGEEVENT.fields_by_name[
        'time']._serialized_options = b'\202\265\030IApproximate time of history event (may be deliberately fuzzed or omitted)'
    _CSUPPORTREFRESHTOKENDESCRIPTION_TOKENUSAGEEVENT.fields_by_name['ip']._options = None
    _CSUPPORTREFRESHTOKENDESCRIPTION_TOKENUSAGEEVENT.fields_by_name[
        'ip']._serialized_options = b'\202\265\030\036IP at which event was observed'
    _CSUPPORTREFRESHTOKENDESCRIPTION_TOKENUSAGEEVENT.fields_by_name['country']._options = None
    _CSUPPORTREFRESHTOKENDESCRIPTION_TOKENUSAGEEVENT.fields_by_name[
        'country']._serialized_options = b'\202\265\0305Location (country code) of event, as inferred from IP'
    _CSUPPORTREFRESHTOKENDESCRIPTION_TOKENUSAGEEVENT.fields_by_name['state']._options = None
    _CSUPPORTREFRESHTOKENDESCRIPTION_TOKENUSAGEEVENT.fields_by_name[
        'state']._serialized_options = b'\202\265\0303Location (state code) of event, as inferred from IP'
    _CSUPPORTREFRESHTOKENDESCRIPTION_TOKENUSAGEEVENT.fields_by_name['city']._options = None
    _CSUPPORTREFRESHTOKENDESCRIPTION_TOKENUSAGEEVENT.fields_by_name[
        'city']._serialized_options = b'\202\265\030-Location (city) of event, as inferred from IP'
    _CSUPPORTREFRESHTOKENDESCRIPTION.fields_by_name['os_platform']._options = None
    _CSUPPORTREFRESHTOKENDESCRIPTION.fields_by_name[
        'os_platform']._serialized_options = b'\202\265\030;EPlatformType - rough classification of device OS, if known'
    _CSUPPORTREFRESHTOKENDESCRIPTION.fields_by_name['os_type']._options = None
    _CSUPPORTREFRESHTOKENDESCRIPTION.fields_by_name[
        'os_type']._serialized_options = b'\202\265\030&EOSType - specific device OS, if known'
    _CSUPPORTREFRESHTOKENDESCRIPTION.fields_by_name['auth_type']._options = None
    _CSUPPORTREFRESHTOKENDESCRIPTION.fields_by_name[
        'auth_type']._serialized_options = b'\202\265\030>EAuthTokenGuardType - device authorization mechanism, if known'
    _CSUPPORTREFRESHTOKENDESCRIPTION.fields_by_name['gaming_device_type']._options = None
    _CSUPPORTREFRESHTOKENDESCRIPTION.fields_by_name[
        'gaming_device_type']._serialized_options = b'\202\265\030bEGamingDeviceType - classify console/PC/SteamDeck, if known; applies only for Steam Client devices'
    _CSUPPORTREFRESHTOKENDESCRIPTION.fields_by_name['first_seen']._options = None
    _CSUPPORTREFRESHTOKENDESCRIPTION.fields_by_name[
        'first_seen']._serialized_options = b'\202\265\030.Information about original authorization event'
    _CSUPPORTREFRESHTOKENDESCRIPTION.fields_by_name['last_seen']._options = None
    _CSUPPORTREFRESHTOKENDESCRIPTION.fields_by_name[
        'last_seen']._serialized_options = b'\202\265\030>Information about most-recently seen, if known for this device'
    _CAUTHENTICATIONSUPPORT_QUERYREFRESHTOKENBYID_REQUEST.fields_by_name['token_id']._options = None
    _CAUTHENTICATIONSUPPORT_QUERYREFRESHTOKENBYID_REQUEST.fields_by_name[
        'token_id']._serialized_options = b'\202\265\030+Token ID of the token to look up (required)'
    _CAUTHENTICATIONSUPPORT_REVOKETOKEN_REQUEST.fields_by_name['token_id']._options = None
    _CAUTHENTICATIONSUPPORT_REVOKETOKEN_REQUEST.fields_by_name[
        'token_id']._serialized_options = b'\202\265\030*Token ID of the token to revoke (required)'
    _CAUTHENTICATIONSUPPORT_REVOKETOKEN_REQUEST.fields_by_name['steamid']._options = None
    _CAUTHENTICATIONSUPPORT_REVOKETOKEN_REQUEST.fields_by_name[
        'steamid']._serialized_options = b'\202\265\030.Steam ID of the owner of that token (required)'
    _CAUTHENTICATIONSUPPORT_GETTOKENHISTORY_REQUEST.fields_by_name['token_id']._options = None
    _CAUTHENTICATIONSUPPORT_GETTOKENHISTORY_REQUEST.fields_by_name[
        'token_id']._serialized_options = b'\202\265\0303Token ID of the token to get history for (required)'
    _AUTHENTICATION._options = None
    _AUTHENTICATION._serialized_options = b'\202\265\030\026Authentication Service'
    _AUTHENTICATION.methods_by_name['GetPasswordRSAPublicKey']._options = None
    _AUTHENTICATION.methods_by_name[
        'GetPasswordRSAPublicKey']._serialized_options = b'\202\265\030KFetches RSA public key to use to encrypt passwords for a given account name'
    _AUTHENTICATION.methods_by_name['BeginAuthSessionViaQR']._options = None
    _AUTHENTICATION.methods_by_name[
        'BeginAuthSessionViaQR']._serialized_options = b'\202\265\030\034start authentication process'
    _AUTHENTICATION.methods_by_name['BeginAuthSessionViaCredentials']._options = None
    _AUTHENTICATION.methods_by_name[
        'BeginAuthSessionViaCredentials']._serialized_options = b'\202\265\030\034start authentication process'
    _AUTHENTICATION.methods_by_name['PollAuthSessionStatus']._options = None
    _AUTHENTICATION.methods_by_name[
        'PollAuthSessionStatus']._serialized_options = b'\202\265\030\"poll during authentication process'
    _AUTHENTICATION.methods_by_name['GetAuthSessionInfo']._options = None
    _AUTHENTICATION.methods_by_name[
        'GetAuthSessionInfo']._serialized_options = b'\202\265\030Yget metadata of specific auth session, this will also implicitly bind the calling account'
    _AUTHENTICATION.methods_by_name['UpdateAuthSessionWithMobileConfirmation']._options = None
    _AUTHENTICATION.methods_by_name[
        'UpdateAuthSessionWithMobileConfirmation']._serialized_options = b'\202\265\0300approve an authentication session via mobile 2fa'
    _AUTHENTICATION.methods_by_name['UpdateAuthSessionWithSteamGuardCode']._options = None
    _AUTHENTICATION.methods_by_name[
        'UpdateAuthSessionWithSteamGuardCode']._serialized_options = b'\202\265\0306approve an authentication session via steam guard code'
    _AUTHENTICATION.methods_by_name['GenerateAccessTokenForApp']._options = None
    _AUTHENTICATION.methods_by_name[
        'GenerateAccessTokenForApp']._serialized_options = b'\202\265\030oGiven a refresh token for a client app audience (e.g. desktop client / mobile client), generate an access token'
    _AUTHENTICATION.methods_by_name['EnumerateTokens']._options = None
    _AUTHENTICATION.methods_by_name[
        'EnumerateTokens']._serialized_options = b'\202\265\030@Enumerate durable (refresh) tokens for the given subject account'
    _AUTHENTICATION.methods_by_name['GetAuthSessionsForAccount']._options = None
    _AUTHENTICATION.methods_by_name[
        'GetAuthSessionsForAccount']._serialized_options = b'\202\265\030LGets all active auth sessions for an account for reference by the mobile app'
    _AUTHENTICATION.methods_by_name['MigrateMobileSession']._options = None
    _AUTHENTICATION.methods_by_name[
        'MigrateMobileSession']._serialized_options = b'\202\265\030iMigrates a WG token to an access and refresh token using a signature generated with the user\'s 2FA secret'
    _AUTHENTICATION.methods_by_name['RevokeRefreshToken']._options = None
    _AUTHENTICATION.methods_by_name[
        'RevokeRefreshToken']._serialized_options = b'\202\265\030\'Mark the given refresh token as revoked'
    _AUTHENTICATIONSUPPORT._options = None
    _AUTHENTICATIONSUPPORT._serialized_options = b'\202\265\030\036Authentication Support Service'
    _AUTHENTICATIONSUPPORT.methods_by_name['QueryRefreshTokensByAccount']._options = None
    _AUTHENTICATIONSUPPORT.methods_by_name[
        'QueryRefreshTokensByAccount']._serialized_options = b'\202\265\030GAsks the server for a list of refresh tokens associated with an account'
    _AUTHENTICATIONSUPPORT.methods_by_name['QueryRefreshTokenByID']._options = None
    _AUTHENTICATIONSUPPORT.methods_by_name[
        'QueryRefreshTokenByID']._serialized_options = b'\202\265\030GAsks the server for a list of refresh tokens associated with an account'
    _AUTHENTICATIONSUPPORT.methods_by_name['RevokeToken']._options = None
    _AUTHENTICATIONSUPPORT.methods_by_name[
        'RevokeToken']._serialized_options = b'\202\265\030\033Revokes a user\'s auth token'
    _AUTHENTICATIONSUPPORT.methods_by_name['GetTokenHistory']._options = None
    _AUTHENTICATIONSUPPORT.methods_by_name[
        'GetTokenHistory']._serialized_options = b'\202\265\030.Gets the audit history for a user\'s auth token'
    _CLOUDGAMING._options = None
    _CLOUDGAMING._serialized_options = b'\202\265\030)Methods for Steam cloud gaming operations'
    _CLOUDGAMING.methods_by_name['CreateNonce']._options = None
    _CLOUDGAMING.methods_by_name[
        'CreateNonce']._serialized_options = b'\202\265\0301Create a nonce for a cloud gaming service session'
    _CLOUDGAMING.methods_by_name['GetTimeRemaining']._options = None
    _CLOUDGAMING.methods_by_name[
        'GetTimeRemaining']._serialized_options = b'\202\265\030<Get the amount of streaming time remaining for a set of apps'
    _EAUTHTOKENPLATFORMTYPE._serialized_start = 12726
    _EAUTHTOKENPLATFORMTYPE._serialized_end = 12911
    _EAUTHSESSIONGUARDTYPE._serialized_start = 12914
    _EAUTHSESSIONGUARDTYPE._serialized_end = 13224
    _EAUTHSESSIONSECURITYHISTORY._serialized_start = 13227
    _EAUTHSESSIONSECURITYHISTORY._serialized_end = 13399
    _EAUTHTOKENREVOKEACTION._serialized_start = 13402
    _EAUTHTOKENREVOKEACTION._serialized_end = 13583
    _EAUTHTOKENSTATE._serialized_start = 13586
    _EAUTHTOKENSTATE._serialized_end = 13850
    _CAUTHENTICATION_GETPASSWORDRSAPUBLICKEY_REQUEST._serialized_start = 125
    _CAUTHENTICATION_GETPASSWORDRSAPUBLICKEY_REQUEST._serialized_end = 250
    _CAUTHENTICATION_GETPASSWORDRSAPUBLICKEY_RESPONSE._serialized_start = 253
    _CAUTHENTICATION_GETPASSWORDRSAPUBLICKEY_RESPONSE._serialized_end = 466
    _CAUTHENTICATION_DEVICEDETAILS._serialized_start = 469
    _CAUTHENTICATION_DEVICEDETAILS._serialized_end = 898
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_REQUEST._serialized_start = 901
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_REQUEST._serialized_end = 1277
    _CAUTHENTICATION_ALLOWEDCONFIRMATION._serialized_start = 1280
    _CAUTHENTICATION_ALLOWEDCONFIRMATION._serialized_end = 1650
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_RESPONSE._serialized_start = 1653
    _CAUTHENTICATION_BEGINAUTHSESSIONVIAQR_RESPONSE._serialized_end = 2278
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_REQUEST._serialized_start = 2281
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_REQUEST._serialized_end = 3089
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_RESPONSE._serialized_start = 3092
    _CAUTHENTICATION_BEGINAUTHSESSIONVIACREDENTIALS_RESPONSE._serialized_end = 3982
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_REQUEST._serialized_start = 3985
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_REQUEST._serialized_end = 4174
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_RESPONSE._serialized_start = 4177
    _CAUTHENTICATION_POLLAUTHSESSIONSTATUS_RESPONSE._serialized_end = 4955
    _CAUTHENTICATION_GETAUTHSESSIONINFO_REQUEST._serialized_start = 4957
    _CAUTHENTICATION_GETAUTHSESSIONINFO_REQUEST._serialized_end = 5074
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE._serialized_start = 5077
    _CAUTHENTICATION_GETAUTHSESSIONINFO_RESPONSE._serialized_end = 6032
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHMOBILECONFIRMATION_REQUEST._serialized_start = 6035
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHMOBILECONFIRMATION_REQUEST._serialized_end = 6575
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHMOBILECONFIRMATION_RESPONSE._serialized_start = 6577
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHMOBILECONFIRMATION_RESPONSE._serialized_end = 6643
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHSTEAMGUARDCODE_REQUEST._serialized_start = 6646
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHSTEAMGUARDCODE_REQUEST._serialized_end = 6965
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHSTEAMGUARDCODE_RESPONSE._serialized_start = 6968
    _CAUTHENTICATION_UPDATEAUTHSESSIONWITHSTEAMGUARDCODE_RESPONSE._serialized_end = 7103
    _CAUTHENTICATION_ACCESSTOKEN_GENERATEFORAPP_REQUEST._serialized_start = 7105
    _CAUTHENTICATION_ACCESSTOKEN_GENERATEFORAPP_REQUEST._serialized_end = 7197
    _CAUTHENTICATION_ACCESSTOKEN_GENERATEFORAPP_RESPONSE._serialized_start = 7199
    _CAUTHENTICATION_ACCESSTOKEN_GENERATEFORAPP_RESPONSE._serialized_end = 7274
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_REQUEST._serialized_start = 7276
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_REQUEST._serialized_end = 7324
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE._serialized_start = 7327
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE._serialized_end = 9034
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_TOKENUSAGEEVENT._serialized_start = 7503
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_TOKENUSAGEEVENT._serialized_end = 7906
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION._serialized_start = 7909
    _CAUTHENTICATION_REFRESHTOKEN_ENUMERATE_RESPONSE_REFRESHTOKENDESCRIPTION._serialized_end = 9034
    _CAUTHENTICATION_GETAUTHSESSIONSFORACCOUNT_REQUEST._serialized_start = 9036
    _CAUTHENTICATION_GETAUTHSESSIONSFORACCOUNT_REQUEST._serialized_end = 9087
    _CAUTHENTICATION_GETAUTHSESSIONSFORACCOUNT_RESPONSE._serialized_start = 9090
    _CAUTHENTICATION_GETAUTHSESSIONSFORACCOUNT_RESPONSE._serialized_end = 9221
    _CAUTHENTICATION_MIGRATEMOBILESESSION_REQUEST._serialized_start = 9224
    _CAUTHENTICATION_MIGRATEMOBILESESSION_REQUEST._serialized_end = 9443
    _CAUTHENTICATION_MIGRATEMOBILESESSION_RESPONSE._serialized_start = 9445
    _CAUTHENTICATION_MIGRATEMOBILESESSION_RESPONSE._serialized_end = 9537
    _CAUTHENTICATION_REFRESHTOKEN_REVOKE_REQUEST._serialized_start = 9540
    _CAUTHENTICATION_REFRESHTOKEN_REVOKE_REQUEST._serialized_end = 9875
    _CAUTHENTICATION_REFRESHTOKEN_REVOKE_RESPONSE._serialized_start = 9877
    _CAUTHENTICATION_REFRESHTOKEN_REVOKE_RESPONSE._serialized_end = 9923
    _CAUTHENTICATIONSUPPORT_QUERYREFRESHTOKENSBYACCOUNT_REQUEST._serialized_start = 9926
    _CAUTHENTICATIONSUPPORT_QUERYREFRESHTOKENSBYACCOUNT_REQUEST._serialized_end = 10145
    _CSUPPORTREFRESHTOKENDESCRIPTION._serialized_start = 10148
    _CSUPPORTREFRESHTOKENDESCRIPTION._serialized_end = 11436
    _CSUPPORTREFRESHTOKENDESCRIPTION_TOKENUSAGEEVENT._serialized_start = 11049
    _CSUPPORTREFRESHTOKENDESCRIPTION_TOKENUSAGEEVENT._serialized_end = 11436
    _CAUTHENTICATIONSUPPORT_QUERYREFRESHTOKENSBYACCOUNT_RESPONSE._serialized_start = 11438
    _CAUTHENTICATIONSUPPORT_QUERYREFRESHTOKENSBYACCOUNT_RESPONSE._serialized_end = 11557
    _CAUTHENTICATIONSUPPORT_QUERYREFRESHTOKENBYID_REQUEST._serialized_start = 11559
    _CAUTHENTICATIONSUPPORT_QUERYREFRESHTOKENBYID_REQUEST._serialized_end = 11680
    _CAUTHENTICATIONSUPPORT_QUERYREFRESHTOKENBYID_RESPONSE._serialized_start = 11682
    _CAUTHENTICATIONSUPPORT_QUERYREFRESHTOKENBYID_RESPONSE._serialized_end = 11795
    _CAUTHENTICATIONSUPPORT_REVOKETOKEN_REQUEST._serialized_start = 11798
    _CAUTHENTICATIONSUPPORT_REVOKETOKEN_REQUEST._serialized_end = 11977
    _CAUTHENTICATIONSUPPORT_REVOKETOKEN_RESPONSE._serialized_start = 11979
    _CAUTHENTICATIONSUPPORT_REVOKETOKEN_RESPONSE._serialized_end = 12024
    _CAUTHENTICATIONSUPPORT_GETTOKENHISTORY_REQUEST._serialized_start = 12026
    _CAUTHENTICATIONSUPPORT_GETTOKENHISTORY_REQUEST._serialized_end = 12149
    _CSUPPORTREFRESHTOKENAUDIT._serialized_start = 12151
    _CSUPPORTREFRESHTOKENAUDIT._serialized_end = 12251
    _CAUTHENTICATIONSUPPORT_GETTOKENHISTORY_RESPONSE._serialized_start = 12253
    _CAUTHENTICATIONSUPPORT_GETTOKENHISTORY_RESPONSE._serialized_end = 12347
    _CCLOUDGAMING_CREATENONCE_REQUEST._serialized_start = 12349
    _CCLOUDGAMING_CREATENONCE_REQUEST._serialized_end = 12416
    _CCLOUDGAMING_CREATENONCE_RESPONSE._serialized_start = 12418
    _CCLOUDGAMING_CREATENONCE_RESPONSE._serialized_end = 12484
    _CCLOUDGAMING_GETTIMEREMAINING_REQUEST._serialized_start = 12486
    _CCLOUDGAMING_GETTIMEREMAINING_REQUEST._serialized_end = 12563
    _CCLOUDGAMING_TIMEREMAINING._serialized_start = 12565
    _CCLOUDGAMING_TIMEREMAINING._serialized_end = 12635
    _CCLOUDGAMING_GETTIMEREMAINING_RESPONSE._serialized_start = 12637
    _CCLOUDGAMING_GETTIMEREMAINING_RESPONSE._serialized_end = 12723
    _AUTHENTICATION._serialized_start = 13853
    _AUTHENTICATION._serialized_end = 16328
    _AUTHENTICATIONSUPPORT._serialized_start = 16331
    _AUTHENTICATIONSUPPORT._serialized_end = 17147
    _CLOUDGAMING._serialized_start = 17150
    _CLOUDGAMING._serialized_end = 17520
# @@protoc_insertion_point(module_scope)
